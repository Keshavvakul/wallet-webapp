# Base image
FROM node:20.12.0-alpine3.19 AS base

# Use libc6-compat as needed for Alpine-based builds
RUN apk update && apk add --no-cache libc6-compat

# Builder stage
FROM base AS builder

WORKDIR /app
RUN npm install -g turbo
# Copy the project files to the container
COPY . .
# Prune unnecessary files with Turbo
RUN turbo prune web --docker

# Installer stage
FROM base AS installer
RUN apk update && apk add --no-cache libc6-compat
WORKDIR /app

# Copy the lockfile and package.json for isolated dependencies
COPY --from=builder /app/out/json/ .

# Install dependencies using npm
RUN npm install

# Copy the full project files
COPY --from=builder /app/out/full/ .

# Build the project using Turbo
WORKDIR /app/packages/db
RUN cd /app/packages/db && npx prisma generate

WORKDIR /app/apps/user-app
RUN npm run build

# Debugging stage
FROM base AS runner

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

# Expose port 3000
Expose 3000

# Add debug steps to inspect the filesystem and ensure `.next` exists
COPY --from=installer --chown=nextjs:nodejs /app/apps/user-app/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/user-app/.next/static ./apps/user-app/.next/static

CMD HOSTNAME="0.0.0.0" node apps/user-app/server.js
